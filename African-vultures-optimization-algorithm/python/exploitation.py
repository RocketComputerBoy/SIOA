# Generated with SMOP  0.41
#from libsmop import *
# exploitation.m

from numpy import *
from numpy.random import *
from levyFlight import levyFlight
#@function
def exploitation(current_vulture_X=None,Best_vulture1_X=None,Best_vulture2_X=None,random_vulture_X=None,F=None,p2=None,p3=None,variables_no=None,upper_bound=None,lower_bound=None,*args,**kwargs):
#    varargin = exploitation.varargin
#    nargin = exploitation.nargin

    # phase 1
    if abs(F) < 0.5:
        if rand() < p2:
            A = Best_vulture1_X - ((Best_vulture1_X*current_vulture_X)/(Best_vulture1_X-current_vulture_X**2))*F             
            B = Best_vulture2_X - ((Best_vulture2_X*current_vulture_X)/(Best_vulture2_X-current_vulture_X**2))*F
            #print(A)

            #A=Best_vulture1_X - dot(((multiply(Best_vulture1_X,current_vulture_X)) / (Best_vulture1_X - current_vulture_X ** 2)),F)
# exploitation.m:7
            #B=Best_vulture2_X - dot(((multiply(Best_vulture2_X,current_vulture_X)) / (Best_vulture2_X - current_vulture_X ** 2)),F)
# exploitatio.m 8
            current_vulture_X=(A+B)/2
# exploitation.m:9
        else:
            current_vulture_X = random_vulture_X-abs(random_vulture_X-current_vulture_X)*F*levyFlight(variables_no)
            #current_vulture_X=random_vulture_X - multiply(dot(abs(random_vulture_X - current_vulture_X),F),levyFlight(variables_no))
# exploitation.m:11
    
    # phase 2
    if abs(F) >= 0.5:
        if rand() < p3:
            #print(random_vulture_X.shape)
            current_vulture_X = (abs((2*rand())*random_vulture_X-current_vulture_X))*(F+rand())-(random_vulture_X-current_vulture_X)
            #current_vulture_X=dot((abs(dot((dot(2,rand())),random_vulture_X) - current_vulture_X)),(F + rand())) - (random_vuliture_X - current_vulture_X)
# exploitation.m:17
        else:
            s1=multiply(multiply(random_vulture_X,(dot(rand(),current_vulture_X) / (dot(2,pi)))),cos(current_vulture_X))
# exploitation.m:19
            s2=multiply(multiply(random_vulture_X,(dot(rand(),current_vulture_X) / (dot(2,pi)))),sin(current_vulture_X))
# exploitation.m:20
            current_vulture_X=random_vulture_X - (s1 + s2)
# exploitation.m:21
    
    return current_vulture_X
    
if __name__ == '__main__':
    pass
    
